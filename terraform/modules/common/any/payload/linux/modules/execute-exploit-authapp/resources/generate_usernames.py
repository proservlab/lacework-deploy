#!/usr/bin/env python3

import argparse

import argparse
from pathlib import Path

parser = argparse.ArgumentParser(
    description='generate possible usernames from first and last names')
parser.add_argument('--first', dest='first', type=str,
                    help='first name')
parser.add_argument('--last', dest='last', type=str,
                    help='last name')
parser.add_argument('--output', dest='output', type=str,
                    help='path to output results')

args = parser.parse_args()


def generate_usernames(first_name, last_name):
    # Lowercase, Capitalize, and Uppercase versions of names
    names_variants = [
        (first_name.lower(), last_name.lower()),
        (first_name.capitalize(), last_name),
        (first_name.upper(), last_name.upper()),
        (first_name, last_name.capitalize()),
        (first_name.capitalize(), last_name.capitalize()),
    ]
    initials = first_name[0].lower() + last_name[0].lower()

    # Generate username patterns
    patterns = [
        '{0}{1}',  # johndoe
        '{0}_{1}',  # john_doe
        '{0}.{1}',  # john.doe
        '{0}-{1}',  # john-doe
        '{0}',  # john
        '{1}',  # doe
        '{0[0]}{1}',  # jdoe
        '{0[0]}.{1}',  # j.doe
        '{0[0]}_{1}',  # j_doe
        '{0[0]}-{1}',  # j-doe
        '{0}{1[0]}',  # johnd
        '{1}{0}',  # doejohn
        '{1}_{0}',  # doe_john
        '{1}.{0}',  # doe.john
        '{1}-{0}',  # doe-john
        '{1[0]}{0}',  # djohn
        '{1[0]}.{0}',  # d.john
        '{1[0]}_{0}',  # d_john
        '{1[0]}-{0}',  # d-john
        '{1}{0[0]}',  # doej
        '{1}_{0[0]}',  # doe_j
        '{1}.{0[0]}',  # doe.j
        '{1}-{0[0]}',  # doe-j
    ]

    # Apply patterns to generate usernames
    usernames = set()
    for first, last in names_variants:
        for pattern in patterns:
            usernames.add(pattern.format(first, last))

    # Return a sorted list to maintain order
    return sorted(usernames)


if __name__ == '__main__':
    usernames = generate_usernames(args.first, args.last)
    with open(args.output, 'w') as f:
        for username in usernames:
            print(username)
            f.write(f"{username}\n")
