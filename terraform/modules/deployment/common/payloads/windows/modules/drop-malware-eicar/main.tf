locals {
    eicar_string_base64 = "WDVPIVAlQEFQWzRcUFpYNTQoUF4pN0NDKTd9JEVJQ0FSLVNUQU5EQVJELUFOVElWSVJVUy1URVNULUZJTEUhJEgrSCo="
    eicar_path = var.inputs["eicar_path"]
    payload = <<-EOT
    # Set initial variables (see delayed_start.ps1 for full delivered script)
    $payloadPath = "$tempDir\payload_$${scriptName}.ps1"
    $eicarPath = "${local.eicar_path}"  # Adjust path as needed
    $startHash = (Get-FileHash -Path $payloadPath -Algorithm SHA256).Hash

    # Check if payload has been updated by comparing SHA-256 hashes
    function Check-PayloadUpdate {
        param (
            [string]$filePath,
            [string]$originalHash
        )
        $currentHash = (Get-FileHash -Path $filePath -Algorithm SHA256).Hash
        Write-Log "Comparing start payload hash: $originalHash to current payload hash: $currentHash"
        return $currentHash -ne $originalHash
    }

    # Main loop
    while ($true) {
        Write-Log "Starting script"
        Write-Log "Creating EICAR file: $${eicarPath}-$(hostname)"
        
        # Remove old EICAR files and create a new one (Simulating payload)
        Remove-Item "$${eicarPath}*" -Force -ErrorAction SilentlyContinue
        $eicarContent = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String("${base64decode(local.eicar_string_base64)}"))
        Set-Content -Path "$${eicarPath}-$(hostname)" -Value $eicarContent
        
        Write-Log "EICAR file created: $(Get-Item "$${eicarPath}-$(hostname)")"
        Write-Log "Waiting 30 minutes..."
        Start-Sleep -Seconds 1800  # Sleep for 30 minutes
        
        # Check if the payload has been updated
        if (Check-PayloadUpdate -filePath $payloadPath -originalHash $startHash) {
            Write-Log "Payload update detected - exiting loop and forcing payload download"
            Remove-Item -Path $payloadPath -Force -ErrorAction SilentlyContinue
            break
        } else {
            Write-Log "Restarting loop..."
        }
    }

    Write-Log "Done."
    EOT
    
    base64_payload = templatefile("${path.module}/../../delayed_start.ps1", { config = {
        script_name = var.inputs["tag"]
        log_rotation_count = 2
        powershell_pre_tasks = ""
        choco_packages = ""
        powershell_post_tasks = ""
        script_delay_secs = 30
        next_stage_powershell_payload = local.payload
    }})

    outputs = {
        base64_payload = base64gzip(local.base64_payload)
        base64_uncompressed_powershell_payload = base64encode(local.base64_payload)
        base64_uncompressed_powershell_payload_additional = []
    }
}